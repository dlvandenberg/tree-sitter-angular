====
NgIf
====

<span *ngIf="someCondition">{{ value }}</span>
<span *ngIf="someCondition && otherCondition">{{ value }}</span>

---

(fragment
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (expression
              (identifier)
            )
          )
        )
      )
    )
    (interpolation
      (expression
        (identifier)
      )
    )
    (end_tag
      (tag_name)
    )
  )
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (conditional_expression
              (identifier)
              (conditional_operator)
              (identifier)
            )
          )
        )
      )
    )
    (interpolation
      (expression
        (identifier)
      )
    )
    (end_tag
      (tag_name)
    )
  )
)

=========
NgIf else
=========

<span *ngIf="someCondition; else elseBlock">{{ value }}</span>
<span #elseBlock>{{ value }}</span>

---

(fragment
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (expression
              (identifier)
            )
            (special_keyword)
            (identifier)
          )
        )
      )
    )
    (interpolation
      (expression
        (identifier)
      )
    )
    (end_tag
      (tag_name)
    )
  )
  (element
    (start_tag
      (tag_name)
      (attribute
        (attribute_name)
      )
    )
    (interpolation
      (expression
        (identifier)
      )
    )   
    (end_tag
      (tag_name)
    )
  )
)

===============
NgIf with alias
===============

<span *ngIf="{
    isAuthenticated: isAuthenticated$ | async
  } as data">
  {{ data.isAuthenticated }}
</span>

---

(fragment
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (expression
              (object
                (pair
                  (identifier)
                  (expression
                    (identifier)
                    (pipe_sequence
                      (pipe_operator)
                      (pipe_call
                        (identifier)
                      )
                    )
                  )
                )
              )
            )
            (special_keyword)
            (identifier)
          )
        )
      )
    )
    (interpolation
      (expression
        (member_expression
          (identifier)
          (identifier)
        )
      )
    )
    (end_tag
      (tag_name)
    )
  )
)


======================
NgIf binary expression
======================

<span *ngIf="a > b"></span>
<span *ngIf="a == b"></span>
<span *ngIf="a === b"></span>
<span *ngIf="a != b"></span>
<span *ngIf="a !== b"></span>
<span *ngIf="a && b"></span>
<span *ngIf="a || b"></span>

---

(fragment
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (binary_expression
              (identifier)
              (identifier)
            )
          )
        )
      )
    )
    (end_tag
      (tag_name)
    )
  )
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (binary_expression
              (identifier)
              (identifier)
            )
          )
        )
      )
    )
    (end_tag
      (tag_name)
    )
  )
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (binary_expression
              (identifier)
              (identifier)
            )
          )
        )
      )
    )
    (end_tag
      (tag_name)
    )
  )
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (binary_expression
              (identifier)
              (identifier)
            )
          )
        )
      )
    )
    (end_tag
      (tag_name)
    )
  )
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (binary_expression
              (identifier)
              (identifier)
            )
          )
        )
      )
    )
    (end_tag
      (tag_name)
    )
  )
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (conditional_expression
              (identifier)
              (conditional_operator)
              (identifier)
            )
          )
        )
      )
    )
    (end_tag
      (tag_name)
    )
  )
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (conditional_expression
              (identifier)
              (conditional_operator)
              (identifier)
            )
          )
        )
      )
    )
    (end_tag
      (tag_name)
    )
  )
)

=====
NgFor
=====

<span *ngFor="let item of items">{{ item }}</span>

---

(fragment
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_declaration
            (special_keyword)
            (structural_assignment
              (identifier)
              (identifier)
              (expression
                (identifier)
              )
            )
          )
        )
      )
    )
    (interpolation
      (expression
        (identifier)
      )
    )
    (end_tag
      (tag_name)
    )
  )
)

================
NgFor with alias
================

<li *ngFor="let person of people; let i = index; let isEven = even; let isOdd = odd; trackBy: trackByPersonId">
</li>

---

(fragment
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_declaration
            (special_keyword)
            (structural_assignment
              (identifier)
              (identifier)
              (expression
                (identifier)
              )
            )
            (structural_assignment
              (special_keyword)
              (identifier)
              (expression
                (identifier)
              )
            )
            (structural_assignment
              (special_keyword)
              (identifier)
              (expression
                (identifier)
              )
            )
            (structural_assignment
              (special_keyword)
              (identifier)
              (expression
                (identifier)
              )
            )
            (structural_assignment
              (identifier)
              (identifier)
            )
          )
        )
      )
    )
    (end_tag
      (tag_name)
    )
  )
)

========
NgSwitch
========

<div [ngSwitch]="currentItem.feature">
  <span *ngSwitchCase="'stout'"></span>
  <span *ngSwitchDefault></span>
</div>

---

(fragment
  (element
    (start_tag
      (tag_name)
      (attribute
        (property_binding
          (binding_name
            (identifier)
          )
          (expression
            (member_expression
              (identifier)
              (identifier)
            )
          )
        )
      )
    )
    (element
      (start_tag
        (tag_name)
        (attribute
          (structural_directive
            (identifier)
            (structural_expression
              (expression
                (string)
              )
            )
          )
        )
      )
      (end_tag
        (tag_name)
      )
    )
    (element
      (start_tag
        (tag_name)
        (attribute
          (structural_directive
            (identifier)
          )
        )
      )
      (end_tag
        (tag_name)
      )
    )
    (end_tag
      (tag_name)
    )
  )
)


=======================
Template Outlet context
=======================

<ng-container
  *ngTemplateOutlet="
    tab.url === undefined || tab.url === null ? tabTemplate : navigableTabTemplate;
    context: { $implicit: tab, index: index }
  "
>
</ng-container>

---

(fragment
  (element
    (start_tag
      (tag_name)
      (attribute
        (structural_directive
          (identifier)
          (structural_expression
            (ternary_expression
              (conditional_expression
                (binary_expression
                  (member_expression
                    (identifier)
                    (identifier)
                  )
                  (identifier)
                )
                (conditional_operator)
                (binary_expression
                  (member_expression
                    (identifier)
                    (identifier)
                  )
                  (identifier)
                )
              )
              (ternary_operator)
              (identifier)
              (ternary_operator)
              (identifier)
            )
            (special_keyword)
            (expression
              (object
                (pair
                  (identifier)
                  (expression
                    (identifier)
                  )
                )
                (pair
                  (identifier)
                  (expression
                    (identifier)
                  )
                )
              )
            )
          )
        )
      )
    )
    (end_tag
      (tag_name)
    )
  )
)
